on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Node Project `my-app` CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
    - name: Build and push Nginx image to Amazon ECR
      id: build-nginx_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: nginx
      run: |
        docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Build and push PHP image to Amazon ECR
      id: build-php_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: php
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

##################################################################
# -t $ECR_REGISTRY/$ECR_REPOSITORY:latest   
      
#     - name: Scan image
#       id: scan
#       uses: sysdiglabs/scan-action@v3
#       with:
#         image-tag: "sysdiglabs/dummy-vuln-app:latest"
#         sysdig-secure-token: ${{ secrets.MYTOKEN }}
#         input-type: docker-daemon
#         run-as-user: root
#     - uses: github/codeql-action/upload-sarif@v2
#       if: always()
#       with:
#         sarif_file: ${{ steps.scan.outputs.sarifReport }} 
################################################################
    # - name: Check snyk scan status
    #   run: |
    #     result=$( cat application/${{ matrix.repository }}/snyk.sarif | \
    #       jq -r '.runs[].results | length'
    #     )
    #     exit $result
          
    # - name: Upload sarif file to Github Code Scanning
    #   if: always()
    #   uses: github/codeql-action/upload-sarif@v2
    #   with:
    #     sarif_file: application/${{ matrix.repository }}
          
    # - name: Check docker image scan status
    #   if: ${{ steps.docker-image-scan_php.outcome == 'failure' }}
    #   run: exit 1

#########################################################################
#- name: Manual push nginx in the ecr
#       env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       if: ${{ (github.event.inputs.tags == true) && ( github.docker-image-scan.action_status == 'critical') }}
#       run: |
#         echo "Log level: ${{ github.event.inputs.logLevel }}"
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  
##########################################################################
#     - name: Create task definition with nginx
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ecs-task-definition.json
#         container-name: magento_ecr_image_nginx
# #         image: nginx
# #         port: 80
# #         network: sigma_magento-php_fpm:sigma_magento-php_fpm
# #       env: 
# #         PHP_FPM_HOST: sigma_magento-php_fpm
# #         PHP_FPM_PORT: 9000
#         image: nginx
# #     - name: Retrieve trask def
# #       uses: pagarme/ecs-task-def-replacements@main
# #       id: task
# #       with:
# #         cluster-name: magento-ecs-cluster
# #         service-name: magento-ecs_service
# #         replacements: |
# #           {
# #             "containerDefinitions": [{
# #               "image": "nginx"
# #             }]
# #           }  