on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Node Project `my-app` CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
#     - name: Build Nginx image
#       id: build-nginx_image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG: Nginx
#       run: |
#         docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
           
           
#     - name: Scan image
#       uses: anchore/scan-action@v3
#       id: docker-image-scan
#       with:
#         image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#         fail-build: false
#         severity-cutoff: critical   
      
#     - name: Resault scan and push docker images nginx 
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG: Nginx
#       if: ${{  github.docker-image-scan.action_status != 'critical' }}
#       run: |
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



    - name: Build PHP image to Amazon ECR
  #    id: build-php_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG_PHP: php
      run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP .
    
#     - name: Scan image php
#       uses: anchore/scan-action@v3
#       id: docker-image-scan_php
#       continue-on-error: true
#       with:
#         image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP"
#         fail-build: false
#         severity-cutoff: critical    
      
#     - name: Resault scan and push docker images php
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG: php
#       if: ${{  github.docker-image-scan.action_status != 'critical' }}
#       run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP
    
  
  
