on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Node Project `my-app` CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
#     - name: Python module dependency scan
#       working-directory: Magento2
#       env:
#         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         DOCKER_BUILDKIT: 1
#       run: |
#         docker target scan-result \
#           --output type=local \
#           --build-arg SNYK_TOKEN=${SNYK_TOKEN} .
          
#     - name: Check snyk scan status
#       run: |
#         result=$( cat application/${{ matrix.repository }}/snyk.sarif | \
#           jq -r '.runs[].results | length'
#         )
#         exit $result
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
    - name: Build Nginx image to Amazon ECR
      id: build-nginx_image
      run: docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        #  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - uses: Azure/container-scan@v0
      name: scan image for vulnerabilities
        # threshold levels are UNKNOWN, LOW, MEDIUM, HIGH, CRITICAL
     # severity-threshold: MEDIUM
      id: container_scan
        # To fail the job when vulnerabilities are found, set to false
      continue-on-error: true
      with:
        image-name: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
        
        
#     - name: Check docker image scan status
#       if: ${{ steps.docker-image-scan.outcome == 'failure' }}
#       run: exit 1
    
#     - name: Push Nginx image to Amazon ECR
#       if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
#       run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
#     - name: Build and push PHP image to Amazon ECR
#       id: build-php_image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG: php
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
