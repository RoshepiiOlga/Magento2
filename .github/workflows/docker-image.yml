on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Node Project `my-app` CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
    - name: Build Nginx image
      id: build-nginx_image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: Nginx
      run: |
        docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
    - name: Scan image
      uses: anchore/scan-action@v3
      id: docker-image-scan
      continue-on-error: true
      with:
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        fail-build: false
        severity-cutoff: critical   
      
    - name: Resault scan and push docker images nginx 
      if: ${{ steps.docker-image-scan.outputs !=  severity-cutoff }}
      run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
#     - name: Scan image
#       id: scan
#       uses: sysdiglabs/scan-action@v3
#       with:
#         image-tag: "sysdiglabs/dummy-vuln-app:latest"
#         sysdig-secure-token: ${{ secrets.MYTOKEN }}
#         input-type: docker-daemon
#         run-as-user: root
#     - uses: github/codeql-action/upload-sarif@v2
#       if: always()
#       with:
#         sarif_file: ${{ steps.scan.outputs.sarifReport }} 
##################################################################
#     - name: Build PHP image to Amazon ECR
#       id: build-php_image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG: php
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#     - name: Scan image
#       uses: anchore/scan-action@v3
#       id: docker-image-scan_php
#       continue-on-error: true
#       with:
#         image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#         fail-build: false
#         severity-cutoff: critical
        
#     - name: Check snyk scan status
#       run: |
#         result=$( cat application/${{ matrix.repository }}/snyk.sarif | \
#           jq -r '.runs[].results | length'
#         )
#         exit $result
          
#     - name: Upload sarif file to Github Code Scanning
#       if: always()
#       uses: github/codeql-action/upload-sarif@v2
#       with:
#         sarif_file: application/${{ matrix.repository }}
          
#     - name: Check docker image scan status
#       if: ${{ steps.docker-image-scan_php.outcome == 'failure' }}
#       run: exit 1    
      
#     - name: Resault scan and push docker images php
# #      if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
#       run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
  
  
