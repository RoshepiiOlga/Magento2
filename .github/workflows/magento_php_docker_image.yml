on:
#   push:
#     branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - create a new image
      tags:
        description: 'Test scenario tags'
        required: false 
        type: boolean
env:
  LEVEL: ${{ github.event.inputs.logLevel }}
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
  IMAGE_TAG_PHP: php
  
name: Node Project `php` CI on ECR

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build PHP image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP .
    
    - name: Scan image php
      uses: anchore/scan-action@v3
      id: docker-image-scan_php
      continue-on-error: true
      with:
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP"
        fail-build: false
        severity-cutoff: critical    
      
    - name: Automate push php in the ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      if: ${{  github.docker-image-scan.action_status != 'critical' }}
      run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP
            
    - name: Manual push php in the ecr
      env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      if: ${{ ( github.docker-image-scan.action_status == 'critical') && (github.event.inputs.tags == true) }}
      run: |
        echo "Log level: ${{ github.event.inputs.logLevel }}"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP    
        
    - name: Manual check for high vulnerability
      if: ${{ ( github.docker-image-scan.action_status == 'critical') && (github.event.inputs.tags != true) }}
      run: |
        echo "Image has high vulnerability"
         
