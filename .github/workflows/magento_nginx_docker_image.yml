on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - create a new image
        - debug 
      tags:
        description: 'Test scenario tags'
        required: false 
        type: boolean

#     inputs:
#       test_input1:
#         description: 'Name the test'
#         required: true
#         default: 'test1'
#       testInput2:
#         description: 'Description'
#         required: true
#         default: 'create images'
      
#     inputs:
#       git-ref:
#         description: Manuall starting (Optional)    
#       environment:
#         description: 'Environment to run tests against'
#         type: environment
#         required: false
env:
  LEVEL: ${{ github.event.inputs.logLevel }}
#   TAGS: ${{ github.event.inputs.tags }}
#   ENVIRONMENT: ${{ github.event.inputs.environment }}    
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
  IMAGE_TAG: nginx
 
name: Node Project `nginx` CI/CD on ECR 

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
          
    - name: Build Nginx image
      env:
        ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG:      nginx
      id: build-nginx_image        
      run: docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .         
           
    - name: Scan image
      uses: anchore/scan-action@v3
      id: docker-image-scan
      with:
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        fail-build: false
        severity-cutoff: critical   
      
#     - name: Resault scan and push docker images nginx
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
# #         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
# #         IMAGE_TAG: nginx
#       if: ${{ ( github.docker-image-scan.action_status != 'critical')}} #&&  (env.ECR_DEPLOY == 'true')
#       run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
      
    - name: Manuall test 
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #  if: ${{ github.event.inputs.logLevel.options == 'create images' }}
      run: |
        echo "Log level: ${{ github.event.inputs.logLevel }}"
   #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG        
#     - name: Manuall test           
#       if: ${{ (github.docker-image-scan.action_status == 'critical') }}
#       run: echo "Images has critical status."
      
#     - name: test variable
#       if: ${{ env.ECR_DEPLOY == 'false' }}
#       run: exit 1
      



#     - name: Build PHP image to Amazon ECR
#   #    id: build-php_image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG_PHP: php
#       run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP .
    
#     - name: Scan image php
#       uses: anchore/scan-action@v3
#       id: docker-image-scan_php
#       continue-on-error: true
#       with:
#         image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP"
#         fail-build: false
#         severity-cutoff: critical    
      
#     - name: Resault scan and push docker images php
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
#         IMAGE_TAG_PHP: php
#       if: ${{  github.docker-image-scan.action_status != 'critical' }}
#       run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_PHP
    
  
  
