name: Deploy to Amazon ECS

on:
#   push:
#     branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - create a new image
      tags:
        description: 'Test scenario tags'
        required: false 
        type: boolean

env:
  AWS_REGION: eu-west-1                   
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}           
  ECS_SERVICE: magento-ecs_service                
  ECS_CLUSTER: magento-ecs-cluster                
  ECS_TASK_DEFINITION:  magento_ecs_task_github_task                                         
  CONTAINER_NAME: nginx
  IMAGE_TAG: nginx
  LEVEL: ${{ github.event.inputs.logLevel }}
 # ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
 # CONTAINER_NAME_PHP: sigma_magento-php_fpm            
                                             

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
   
#     - name: Create task definition with nginx
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: magento_ecs_task_nginx-php
#         container-name: nginx
#         image: nginx
#         port: 80
#         network: sigma_magento-php_fpm:sigma_magento-php_fpm
#       env: 
#         PHP_FPM_HOST: sigma_magento-php_fpm
#         PHP_FPM_PORT: 9000
#       #  image: ${{ steps.build-image.outputs.image }}

    - name: Retrieve trask def
      uses: pagarme/ecs-task-def-replacements@main
      id: task
      with:
        cluster-name: ${{ env.ECS_CLUSTER }}
        service-name: ${{ env.ECS_SERVICE }}
        replacements: |
          {
            "containerDefinitions": [{
              "image": "nginx"
            }]
          }
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
