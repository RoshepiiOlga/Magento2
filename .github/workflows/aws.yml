name: Deploy to Amazon ECS

on:
#   push:
#     branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - create a new image
      tags:
        description: 'Test scenario tags'
        required: false 
        type: boolean

env:
  AWS_REGION: eu-west-1                   
  ECR_REPOSITORY: ${{ secrets.REPO_NAME }}           
  ECS_SERVICE: magento-ecs_service                
  ECS_CLUSTER: magento-ecs-cluster                
  ECS_TASK_DEFINITION:  magento_ecs_task_github_task                                         
  CONTAINER_NAME: nginx
  IMAGE_TAG: nginx
  LEVEL: ${{ github.event.inputs.logLevel }}
 # CONTAINER_NAME_PHP: sigma_magento-php_fpm            
                                             

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Nginx image
      env:
        ECR_REGISTRY:   ${{ steps.login-ecr.outputs.registry }}
      id: build-nginx_image        
      run: docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .         
           
    - name: Scan image
      uses: anchore/scan-action@v3
      id: docker-image-scan
      with:
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        fail-build: false
        severity-cutoff: critical   
      
    - name: Automate and manual push nginx in the ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      if: ${{ ( github.docker-image-scan.action_status != 'critical') || ( github.docker-image-scan.action_status != 'high') || (github.event.inputs.tags == true) }}
      run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG      
        
    - name: Manual check for high vulnerability
      if: ${{ (github.event.inputs.tags != true) && ( github.docker-image-scan.action_status == 'critical') || github.docker-image-scan.action_status == 'high'}}
      run: |
        echo "Image has high vulnerability"
   
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition  magento_ecs_task_github --query taskDefinition > ecs-task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.render-image-in-task-def.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #  image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ecs-task-definition.json
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
