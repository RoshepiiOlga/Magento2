name: Build and push APP to Amazon ECS

on:
 workflow_dispatch:
   inputs:
     AWS_ACCOUNT:
       description: 'AWS ACCOUNT'
       required: true
       type: text
       default: 908410081654
     AWS_REGION:
       description: 'AWS REGION'
       required: true
       type: text
       default: eu-west-1
     ECR_REPO:
       description: 'ECR REPOSITORY'
       required: true
       type: choice
      # default: magento3 
       options:
          - nginx
          - php
          - php_magento
    #  NAME_TASK_TO_STOP:
    #    description: 'NAME TASK TO STOP'  #${{ github.event.inputs.NAME_TASK_TO_STOP }}
    #    required: true
    #    type: text
    #    default:  input_name_here
     CONTAINER_NAME_WITH_APP:
       description: 'CONTAINER NAME WITH APP'
       required: true
       type: text
       default:  sigma_magento-php_fpm
     ECS_SERVICE_NAME:
       description: 'ECS SERVICE'
       required: true
       type: text
       default:  magento-service-CI
     ECS_CLUSTER_NAME:
       description: 'ECS CLUSTER'
       required: true
       type: text
       default:  magento-cluster-CI
     fail_scan:
       description: 'Fail build on scan findings?'
       required: true
       type: boolean
       default: true

     
env:
  ECS_TD_JSON_FILE: ecs-task-definition.json
  DOCKER_IMAGE:     ${{ github.event.inputs.AWS_ACCOUNT }}.dkr.ecr.${{ github.event.inputs.AWS_REGION }}.amazonaws.com/${{ github.event.inputs.ECR_REPO }}:${{ github.event.inputs.IMAGE_TAG }}
   
permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Git clone repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.AWS_REGION }}
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: 'Build ${{ github.event.inputs.ECR_REPO }} image'
      run: 
        docker build -f ${{ env.DOCKER_FILE }} -t ${{env.DOCKER_IMAGE}} . 
        
    - name: 'Scan ${{ github.event.inputs.ECR_REPO }} image'
      id: scan
      uses: anchore/scan-action@v3.2.5
      with:
        image:  '${{ env.DOCKER_IMAGE }}'
        fail-build: '${{ github.event.inputs.fail_scan }}'
        severity-cutoff:  High
        acs-report-enable: true
        
    - name: 'push ${{ github.event.inputs.ECR_REPO }} image'
      run: 
        docker push ${{ env.DOCKER_IMAGE }}
       
    - name: Render Amazon ECS task definition for second container with app
      id: render
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TD_JSON_FILE }}
        container-name: ${{ github.event.inputs.CONTAINER_NAME_WITH_APP }}
        image: '${{ env.DOCKER_IMAGE }}'
   
   # Use this check if you don't have portmapping configured.
   # https://docs.aws.amazon.com/cli/latest/reference/ecs/stop-task.html
    - name: Stop the previous task (in order to start a new one)
      env:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.AWS_REGION }}
      run: 
       aws ecs stop-task --cluster magento-cluster-CI --task ${{ github.event.inputs.NAME_TASK_TO_STOP }}
   
   
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render.outputs.task-definition }}
        service: ${{ github.event.inputs.ECS_SERVICE_NAME }}
        cluster: ${{ github.event.inputs.ECS_CLUSTER_NAME }}
        wait-for-service-stability: false
  
#        Manual update aws ecs service 
#        https://docs.aws.amazon.com/cli/latest/reference/ecs/update-service.html
#        aws ecs update-service --cluster ${{ github.event.inputs.ECS_CLUSTER_NAME }} --service ${{ github.event.inputs.ECS_SERVICE_NAME }} --force-new-deployment
