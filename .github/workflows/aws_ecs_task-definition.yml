name: Deploy to Amazon ECS

on:
#   push:
#     branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning' 
        type: choice
        options:
        - create a new image
      tags:
        description: 'Test scenario tags'
        required: false 
        type: boolean
        
env:
  MAGENTO_AWS_REGION:                     eu-west-1                      
  MAGENTO_ECR_REPOSITORY:                 magento_ecr_private_rep
  MAGENTO_ECR_REGISTRY:                   908410081654.dkr.ecr.eu-west-1.amazonaws.com
  MAGENTO_ECS_SERVICE:                    magento-ecs_service                
  MAGENTO_ECS_CLUSTER:                    magento-ecs-cluster                
  MAGENTO_ECS_TD_JSON_FILE:               ecs-task-definition.json 
  MAGENTO_ECS_TD_CONTAINER_PHP:           sigma_magento-php_fpm
  MAGENTO_ECS_TD_CONTAINER_NGINX:         sigma_magento-php_fpm
  MAGENTO_IMAGE_TAG_NGINX:                nginx
  MAGENTO_IMAGE_TAG_PHP:                  php
   # ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
   
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy ubuntu
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.MAGENTO_AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Configure AWS credentials to task definition
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
        aws-region: ${{ env.MAGENTO_AWS_REGION }}
        role-duration-seconds: 1200
        
    - name: Render Amazon ECS task definition for first container nginx
     # id: render-web-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: $MAGENTO_ECS_TD_JSON_FILE
        container-name: $MAGENTO_ECS_TD_CONTAINER_NGINX
        image: $MAGENTO_ECR_REGISTRY/$MAGENTO_ECR_REPOSITORY:$MAGENTO_IMAGE_TAG_NGINX
      #  image: 908410081654.dkr.ecr.eu-west-1.amazonaws.com/magento_ecr_private_rep:nginx 
    
    - name: Render Amazon ECS task definition for second container php
     # id: render-app-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: $MAGENTO_ECS_TD_JSON_FILE
        container-name: $MAGENTO_ECS_TD_CONTAINER_PHP
      #  image: 908410081654.dkr.ecr.eu-west-1.amazonaws.com/magento_ecr_private_rep:php
        image: $MAGENTO_ECR_REGISTRY/$MAGENTO_ECR_REPOSITORY:$MAGENTO_IMAGE_TAG_PHP
   
    - name: Deploy task definition in ECS service
      run: aws ecs update-service --cluster $MAGENTO_ECS_CLUSTER --service MAGENTO_ECS_SERVICE --force-new-deployment
      env:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.MAGENTO_AWS_REGION }}

